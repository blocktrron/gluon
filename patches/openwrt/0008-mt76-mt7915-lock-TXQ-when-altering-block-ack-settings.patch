From: David Bauer <mail@david-bauer.net>
Date: Thu, 8 Feb 2024 20:27:46 +0100
Subject: mt76 mt7915: lock TXQ when altering block-ack settings

When there is a low of traffic fed to the HW from the kernel,
de-establishing a BlockAck session will lead to the HW output corrupted
frames where TA and RA contain the same client MAC-address.

Stopping TX from the OS seems to mitigate this issue.

[Patch contains commented out TX drainage, as tested first]

Signed-off-by: David Bauer <mail@david-bauer.net>

diff --git a/package/kernel/mt76/patches/0001-mt76-mt7915-lock-TXQ-when-altering-block-ack-setting.patch b/package/kernel/mt76/patches/0001-mt76-mt7915-lock-TXQ-when-altering-block-ack-setting.patch
new file mode 100644
index 0000000000000000000000000000000000000000..e7e21f4b90a5d0da244ba72f0de85b3e97af5612
--- /dev/null
+++ b/package/kernel/mt76/patches/0001-mt76-mt7915-lock-TXQ-when-altering-block-ack-setting.patch
@@ -0,0 +1,96 @@
+From bd3955c1aef3137a5930ecb46e3d7eb3416c14e8 Mon Sep 17 00:00:00 2001
+From: David Bauer <mail@david-bauer.net>
+Date: Thu, 8 Feb 2024 15:51:03 +0100
+Subject: [PATCH] mt76 mt7915: lock TXQ when altering block-ack settings
+
+When there is a low of traffic fed to the HW from the kernel,
+de-establishing a BlockAck session will lead to the HW output corrupted
+frames where TA and RA contain the same client MAC-address.
+
+Stopping TX from the OS seems to mitigate this issue.
+
+[Patch contains commented out TX drainage, as tested first]
+
+Signed-off-by: David Bauer <mail@david-bauer.net>
+---
+ mt7915/mcu.c | 48 ++++++++++++++++++++++++++++++++++++++----------
+ 1 file changed, 38 insertions(+), 10 deletions(-)
+
+diff --git a/mt7915/mcu.c b/mt7915/mcu.c
+index 8224f8be..2bbf98da 100644
+--- a/mt7915/mcu.c
++++ b/mt7915/mcu.c
+@@ -681,32 +681,60 @@ out:
+ 				     MCU_EXT_CMD(BSS_INFO_UPDATE), true);
+ }
+ 
++static int mt7915_mcu_add_ba(struct mt7915_dev *dev,
++			     struct ieee80211_ampdu_params *params,
++			     bool enable,
++			     bool tx)
++{
++	struct mt7915_sta *msta = (struct mt7915_sta *)params->sta->drv_priv;
++	struct mt7915_vif *mvif = msta->vif;
++	struct mt76_queue *q = mvif->phy->mt76->q_tx[MT_TXQ_BE];
++	struct mt76_phy *pri_phy = dev->mt76.phys[MT_BAND0];
++	struct mt76_phy *ext_phy = dev->mt76.phys[MT_BAND1];
++	int ret;
++
++	pr_warn("Scheduling all pending txq queued=%d ndesc=%d\n", q->queued, q->ndesc);
++	/* Schedule pending TX */
++	mt76_txq_schedule_all(pri_phy);
++	if (ext_phy)
++		mt76_txq_schedule_all(ext_phy);
++	/* Disable TX worker */
++	pr_warn("Scheduling all pending txq queued=%d ndesc=%d\n", q->queued, q->ndesc);
++
++	mt76_worker_disable(&dev->mt76.tx_worker);
++
++	pr_warn("Disabled tx worker queued=%d ndesc=%d\n", q->queued, q->ndesc);
++
++	ret = mt76_connac_mcu_sta_ba(&dev->mt76, &mvif->mt76, params,
++				      MCU_EXT_CMD(STA_REC_UPDATE),
++				      enable, tx);
++	pr_warn("Sent BA update queued=%d ndesc=%d\n", q->queued, q->ndesc);
++	mt76_worker_enable(&dev->mt76.tx_worker);
++	pr_warn("Enabled tx worker queued=%d ndesc=%d\n", q->queued, q->ndesc);
++
++	tasklet_schedule(&dev->mt76.irq_tasklet);
++
++	return ret;
++}
++
+ /** starec & wtbl **/
+ int mt7915_mcu_add_tx_ba(struct mt7915_dev *dev,
+ 			 struct ieee80211_ampdu_params *params,
+ 			 bool enable)
+ {
+ 	struct mt7915_sta *msta = (struct mt7915_sta *)params->sta->drv_priv;
+-	struct mt7915_vif *mvif = msta->vif;
+ 
+ 	if (enable && !params->amsdu)
+ 		msta->wcid.amsdu = false;
+ 
+-	return mt76_connac_mcu_sta_ba(&dev->mt76, &mvif->mt76, params,
+-				      MCU_EXT_CMD(STA_REC_UPDATE),
+-				      enable, true);
++	return mt7915_mcu_add_ba(dev, params, enable, true);
+ }
+ 
+ int mt7915_mcu_add_rx_ba(struct mt7915_dev *dev,
+ 			 struct ieee80211_ampdu_params *params,
+ 			 bool enable)
+ {
+-	struct mt7915_sta *msta = (struct mt7915_sta *)params->sta->drv_priv;
+-	struct mt7915_vif *mvif = msta->vif;
+-
+-	return mt76_connac_mcu_sta_ba(&dev->mt76, &mvif->mt76, params,
+-				      MCU_EXT_CMD(STA_REC_UPDATE),
+-				      enable, false);
++	return mt7915_mcu_add_ba(dev, params, enable, false);
+ }
+ 
+ static void
+-- 
+2.43.0
+
